a <- available.packages
a <- available.packages()
demo
install.package("slidify")
install.packages("slidify")
a <- available.packages()
a
install.packages("slidify")
source("http://bioconductor.org/biolclite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
find.package("devtools")
install.packages("devtools")
View(a)
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
load("~/.RData")
toc: yes
* `pwd` = print working directory (current directory)
---
}
add2 <- function(x,y){
x+y
}
aad2(2,2)
add2(2,2)
abovex <- functin(x,n) {
use <- x > n
x[use]
}
abovex <- functin(x,n) {
use <- x > n
x[use]
}
abovex <- functin(x,n) {
use <- x > n
x[use]
}
abovex <- functin(x,n) {
use <- x > n
x[use]
}
add2 <- function(x,y){
x+y
}
abovex <- function(x,n) {
use <- x > n
x[use]
}
means ?
?means
?mean
??mean
args(mean)
args(lm)
args(means)
args(lm)
search(
search()
library(datasets)
data(iris)
?iris
iris
f <- factor(c("setosa", "versicolor","virginica"))
f
lapply(split(iris,f),mean)
x <- split(iris,f)
x
lapply(x,mean)
s <- split(iris,irs$Specie)
s <- split(iris,iris$Specie)
lapply(s,colMeans)
View(iris)
lapply(s,function x colMeans(x,c("Sepal.Length")))
lapply(s,function(x) colMeans(x,c("Sepal.Length")))
lapply(s,function x colMeans(x,c("Sepal.Length")))
lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
s
lapply(s,colMeans)
s$Petal.Length
s
s$Petal.Length
iris$Petal.Length
lapply(s,colMeans)
s
s[1]
s[1]
lapply(s, function(x) colMeans(x[,"Petal.Length"]))
lapply(s, function(x) mean(x$Petal.Length))
lapply(s, function(x) colMeans(x[,c("Petal.Length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[,c("Petal.Length","Sepal.Width","Sepal.Length")]))
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
View(mtcars)
View(mtcars)
apply(mtcars, 2, mean)
lapply(s, function(x) colMeans(x[,1:4))
lapply(s, function(x) colMeans(x[,1:4]))
lapply(split(mtcars, mtcars$cyl), function(x) colMeans(x[,1:4]))
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
lapply(split(mtcars, mtcars$cyl), function(x) colMeans(x[,2]))
lapply(split(mtcars, mtcars$cyl), function(x) mean(x[,2]))
lapply(split(mtcars, mtcars$cyl), function(x) mean(x[,1]))
x <- lapply(split(mtcars, mtcars$cyl), function(x) mean(x[,1]))
x
x$4 - x$5
x$"4" - x$"5"
x[1]
x[1]-x[8]
x[8]
x[3]
x[1]-x[3]
x[[1]-x[[3]
x[[1]-x[[3]]
x[[1]]-x[[3]]
debug(ls)
ls
x <- lapply(split(mtcars, mtcars$hp), function(x) mean(x[,1]))
set.seed(1)
rpois(5, 2)
?dpois
?ppois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(x,y)
x
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
clear()
clc()
clear
clc
cl
setwd("~/GIT Repositories")
setwd("~/GIT Repositories/ProgrammingAssignment2")
x <- matrix(10,10)
x
x <- matrix(rnorm(),10,10)
x <- matrix(rnorm(100),10,10)
x
x <- matrix(rnorm(25),5,5)
x
xinv <- solve(x)
xinv
source('~/GIT Repositories/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('~/R/Coursera/RProgramming/cacheMean.R')
vectorTest <- rnorm(10)
vectorTest
cachemean(vectorTest)
a <-makevector(vectorTest)
a <-makeVector(vectorTest)
a
b <- cachemean(vectorTest)
b <- cachemean(a)
b
c <- makeCacheMatrix(x)
x
source('~/GIT Repositories/ProgrammingAssignment2/cachematrix.R')
c <- makeCacheMatrix(x)
c
d <- cacheSolve(c)
source('~/GIT Repositories/ProgrammingAssignment2/cachematrix.R')
c <- makeCacheMatrix(x)
d <- cacheSolve(c)
trace
trace()
debug(cacheSolve)
d <- cacheSolve(c)
d <- cacheSolve(c)
c
source('~/GIT Repositories/ProgrammingAssignment2/cachematrix.R')
d <- cacheSolve(c)
source('~/GIT Repositories/ProgrammingAssignment2/cachematrix.R')
c <- makeCacheMatrix(x)
c
d <- cacheSolve(c)
d
d <- cacheSolve(c)
debug(cacheSolve)
d <- cacheSolve(c)
source('~/GIT Repositories/ProgrammingAssignment2/cachematrix.R')
d <- cacheSolve(c)
d
d <- cacheSolve(c)
xinv
